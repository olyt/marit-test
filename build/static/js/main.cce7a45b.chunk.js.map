{"version":3,"sources":["store/characters/actionTypes.js","store/characters/selectors.js","components/Button/Button.js","components/CharacterItem/CharacterItem.js","components/CharactersList/CharactersList.js","components/Characters/Characters.js","App.js","store/characters/operations.js","store/characters/actions.js","reportWebVitals.js","store/characters/reducer.js","store/rootReducer.js","store/store.js","index.js"],"names":["SET_POSTS","selectCharacters","store","characters","data","Button","text","className","CharacterItem","name","race","CharactersList","charsToRender","chars","map","char","id","Characters","all","useSelector","races","item","listsToRender","filtered","filter","Date","now","Math","random","createListByRace","App","dispatch","useDispatch","useEffect","a","socket","WebSocket","onopen","send","cmd","onmessage","message","JSON","parse","type","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialStore","reducer","action","combineReducers","charactersReducer","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAAaA,EAAY,YCAZC,EAAmB,SAACC,GAAD,OAAWA,EAAMC,WAAWC,MCU7CC,EARA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UACnB,OACI,wBAAQA,UAAWA,EAAnB,SACKD,KCWEE,G,MAZO,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAE1B,OACI,sBAAKH,UAAU,iBAAf,UACI,mBAAGA,UAAU,sBAAb,SAAoCE,IACpC,mBAAGF,UAAU,sBAAb,SAAoCG,IACpC,cAAC,EAAD,CAAQJ,KAAK,sEAAeC,UAAU,kCACtC,cAAC,EAAD,CAAQD,KAAK,6CAAUC,UAAU,uCCS9BI,G,MAfQ,SAAC,GAAa,IAE3BC,EAF0B,EAAXC,MAEOC,KAAI,SAAAC,GAAS,IAC9BC,EAAkBD,EAAlBC,GAAIP,EAAcM,EAAdN,KAAMC,EAAQK,EAARL,KACjB,OAAO,cAAC,EAAD,CAAeD,KAAMA,EAAMC,KAAMA,GAAWM,MAGvD,OACI,sBAAKT,UAAU,kBAAf,UACKK,EACD,cAAC,EAAD,CAAQN,KAAK,mDAAWC,UAAU,6BCY/BU,G,MArBI,WACf,IAAMC,EAAMC,YAAYlB,GAClBmB,EAAQF,EAAIJ,KAAI,SAAAO,GAAI,OAAIA,EAAKX,QAQ7BY,EAAgBF,EAAMN,KAAI,SAAAJ,GAC5B,OAPqB,SAACA,GACtB,IAAMa,EAAWL,EAAIM,QAAO,SAAAT,GAAI,OAAIA,EAAKL,OAASA,KAElD,OAAO,cAAC,EAAD,CAAgBG,MAAOU,GAAeE,KAAKC,MAAQC,KAAKC,UAIxDC,CAAiBnB,MAG5B,OACI,qBAAKH,UAAU,qBAAf,SACKe,MCFEQ,EAdH,WACR,IAAMC,EAAWC,cAMjB,OAJAC,qBAAU,WACNF,ECRqB,uCAAM,WAAOA,GAAP,eAAAG,EAAA,uDACzBC,EAAS,IAAIC,UAAU,mCAEtBC,OAAS,WACZF,EAAOG,KAAK,CAACC,IAAK,cAGtBJ,EAAOK,UAAY,SAACC,GAChB,IAAMrC,EAAOsC,KAAKC,MAAMF,EAAQrC,MAChC2B,ECTyC,CAC7Ca,KAAM5C,EACN6C,QDO2BzC,KATI,2CAAN,yDDStB,CAAC2B,IAGA,qBAAKxB,UAAU,MAAf,SACI,cAAC,EAAD,OGHGuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCLRQ,EAAe,CACjBnD,KAAM,IAcKoD,EAXC,WAAmC,IAAlCtD,EAAiC,uDAAzBqD,EAAcE,EAAW,uCAC9C,OAAQA,EAAOb,MACX,KAAK5C,EACD,MAAO,CACHI,KAAMqD,EAAOZ,SAErB,QACI,OAAO3C,ICNJsD,EAJCE,0BAAgB,CAC5BvD,WAAYwD,I,QCGDzD,EAFD0D,sBAAYJ,EAASK,8BAAoBC,0BAAgBC,OCGvEC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUhE,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRiE,SAASC,eAAe,SAM5BtB,M","file":"static/js/main.cce7a45b.chunk.js","sourcesContent":["export const SET_POSTS = \"SET_POSTS\";\n","export const selectCharacters = (store) => store.characters.data;\n","import React from 'react';\n\nconst Button = ({text, className}) => {\n    return (\n        <button className={className}>\n            {text}\n        </button>\n    );\n};\n\nexport default Button;","import React from 'react';\nimport Button from \"../Button/Button\";\nimport \"./CharacterItem.scss\"\n\nconst CharacterItem = ({name, race}) => {\n\n    return (\n        <div className=\"character-item\">\n            <p className=\"character-item-name\">{name}</p>\n            <p className=\"character-item-race\">{race}</p>\n            <Button text=\"Изменить имя\" className=\"character-item-btn change-btn\"/>\n            <Button text=\"Удалить\" className=\"character-item-btn delete-btn\"/>\n        </div>\n    );\n};\n\nexport default CharacterItem;","import React from 'react';\nimport CharacterItem from \"../CharacterItem/CharacterItem\";\nimport Button from \"../Button/Button\";\nimport \"./CharactersList.scss\"\n\nconst CharactersList = ({chars}) => {\n\n    const charsToRender = chars.map(char => {\n        const {id, name, race} = char;\n        return <CharacterItem name={name} race={race} key={id}/>\n    })\n\n    return (\n        <div className=\"characters-list\">\n            {charsToRender}\n            <Button text=\"Добавить\" className=\"characters-list-btn\"/>\n        </div>\n    );\n};\n\nexport default CharactersList;","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {selectCharacters} from \"../../store/characters/selectors\";\nimport CharactersList from \"../CharactersList/CharactersList\";\nimport \"./Characters.scss\"\n\nconst Characters = () => {\n    const all = useSelector(selectCharacters);\n    const races = all.map(item => item.race);\n\n    const createListByRace = (race) => {\n        const filtered = all.filter(char => char.race === race);\n\n        return <CharactersList chars={filtered} key={Date.now() + Math.random()}/>\n    };\n\n    const listsToRender = races.map(race => {\n        return createListByRace(race);\n    })\n\n    return (\n        <div className=\"characters-wrapper\">\n            {listsToRender}\n        </div>\n    );\n};\n\nexport default Characters;","import './App.scss';\nimport React, {useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {getCharacters} from \"./store/characters/operations\";\nimport Characters from \"./components/Characters/Characters\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getCharacters());\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <Characters/>\n        </div>\n    );\n}\n\nexport default App;\n","import {setCharacters} from \"./actions\";\n\nexport const getCharacters = () => async (dispatch) => {\n    const socket = new WebSocket(\"ws://testapi.marit.expert:3004\");\n\n    socket.onopen = () => {\n        socket.send({cmd: \"get_list\"})\n    }\n\n    socket.onmessage = (message) => {\n        const data = JSON.parse(message.data)\n        dispatch(setCharacters(data));\n    }\n};\n","import {SET_POSTS} from \"./actionTypes\";\n\nexport const setCharacters = (newCharacters) => ({\n    type: SET_POSTS,\n    payload: newCharacters,\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SET_POSTS} from \"./actionTypes\";\n\nconst initialStore = {\n    data: [],\n};\n\nconst reducer = (store = initialStore, action) => {\n    switch (action.type) {\n        case SET_POSTS:\n            return {\n                data: action.payload,\n            };\n        default:\n            return store;\n    }\n};\n\nexport default reducer;","import { combineReducers } from \"redux\";\nimport charactersReducer from \"./characters/reducer\";\n\nconst reducer = combineReducers({\n    characters: charactersReducer,\n});\n\nexport default reducer;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}